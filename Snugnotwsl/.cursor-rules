# üè• Snug & Kisses Healthcare Platform - Cursor AI Rules
# Zoho Catalyst B2B Healthcare Platform for Doula & Childcare Services
# Custom Implementation with Notion MCP Task Management

## üîë Golden Rules (Never Violate)

### Documentation-Driven Development:
- **ALWAYS read and follow `docs/PLANNING.md`** - This is the master blueprint for the entire healthcare platform
- **ALWAYS check `README.md`** - For current setup, installation, and project overview
- **ALWAYS use Notion MCP** to fetch and update tasks from the Snug AI agent task database
- **Use ONLY Zoho official documentation** for implementation examples and patterns
- **NO copy-paste code implementation** - All solutions must be custom-coded for this specific healthcare platform
- **NO generic examples** - Every implementation must be tailored to Snug & Kisses healthcare requirements

### Notion MCP Task Management:
- **Query Notion database** at conversation start to get current active tasks
- **Select specific task** from Notion database before starting any work
- **Update Notion task status** during development (In Progress, Testing, etc.)
- **Mark task as Complete** in Notion database when finished
- **Add discovered sub-tasks** to Notion database during development
- **Reference task context** from Notion for implementation guidance

### File & Code Management:
- **Keep files under 500 lines MAXIMUM** - Split into modules when approaching this limit
- **Chunk write operations to 30 lines max** - For optimal performance and readability
- **Start fresh conversations often** - Long threads degrade healthcare code quality
- **One task per message** - Focus on single Notion task at a time
- **Be specific in requests** - Healthcare context requires precise specifications
- **Write docs and comments as you go** - HIPAA compliance requires documentation

### Healthcare-Specific Golden Rules:
- **HIPAA compliance is non-negotiable** - Every line of code must consider PHI protection
- **Mobile-first always** - Healthcare workers are on mobile devices
- **99.9% uptime mindset** - Healthcare systems cannot fail
- **Professional medical terminology** - Maintain healthcare industry standards
- **Custom solutions only** - No generic healthcare templates or boilerplate code

## üìã Notion MCP Task Workflow

### At Start of Every Conversation:
```
MANDATORY NOTION MCP WORKFLOW:
1. Use Notion MCP to query "Snug AI agent files" database
2. Filter for tasks with status "To Do" or "In Progress"
3. Identify current development priorities
4. Select specific task to work on
5. Update task status to "In Progress" in Notion
6. Reference task details for implementation context
```

### Notion Task Integration Pattern:
```javascript
// Example workflow with Notion MCP integration
async function startDevelopmentTask() {
  // 1. Query Notion database for active tasks
  const activeTasks = await notion.queryDatabase({
    database_id: "snug_ai_agent_files_db",
    filter: {
      property: "Status",
      select: {
        equals: "To Do"
      }
    }
  });
  
  // 2. Select task based on priority
  const currentTask = activeTasks.results[0];
  
  // 3. Update status to In Progress
  await notion.updatePage({
    page_id: currentTask.id,
    properties: {
      "Status": {
        select: {
          name: "In Progress"
        }
      }
    }
  });
  
  // 4. Begin implementation based on task details
  implementCustomSolution(currentTask);
}
```

### During Development:
- **Reference Notion task** for requirements and context
- **Add progress notes** to task in Notion database
- **Create sub-tasks** in Notion if complexity discovered
- **Update status** as development progresses (Testing, Review, etc.)

### After Task Completion:
```javascript
// Mark task as complete in Notion
async function completeTask(taskId, completionNotes) {
  await notion.updatePage({
    page_id: taskId,
    properties: {
      "Status": {
        select: {
          name: "Complete"
        }
      },
      "Completion Notes": {
        rich_text: [
          {
            text: {
              content: completionNotes
            }
          }
        ]
      },
      "Completed Date": {
        date: {
          start: new Date().toISOString()
        }
      }
    }
  });
}
```

## üìö Documentation Requirements (READ FIRST)

### Primary Documentation Sources (In Order of Priority):
1. **Notion "Snug AI agent files" Database** - Current active tasks, priorities, and status
2. **`docs/PLANNING.md`** - Complete project architecture, user stories, technical specifications, HIPAA requirements
3. **`README.md`** - Project overview, setup instructions, current status
4. **`DIRECTORY_STRUCTURE.md`** - File organization and usage guidelines
5. **Zoho Official Documentation** - ONLY source for Catalyst/Zoho One implementation examples

### Before Any Implementation:
```
MANDATORY READING CHECKLIST:
‚ñ° Query Notion database for current task
‚ñ° Select specific task to work on
‚ñ° Update task status to "In Progress" in Notion
‚ñ° Understand requirements from PLANNING.md  
‚ñ° Check project status in README.md
‚ñ° Review file structure in DIRECTORY_STRUCTURE.md
‚ñ° Reference ONLY Zoho official docs for technical patterns
‚ñ° NO external examples or generic code
```

### Zoho Documentation Sources (ONLY APPROVED):
- **Zoho Catalyst Documentation**: https://docs.catalyst.zoho.com/
- **Zoho DataStore Guide**: For PHI-compliant database operations
- **Zoho Functions Documentation**: For AdvancedIO serverless functions
- **Zoho Web SDK**: For React client integration
- **Zoho One Integration Guides**: For CRM, Recruit, Analytics, Creator
- **Zoho Security Best Practices**: For HIPAA-compliant implementations

## üö´ Implementation Restrictions

### DO NOT:
- **Copy any code examples** from external sources or generic templates
- **Use boilerplate healthcare code** - Every line must be custom for this project
- **Implement generic user management** - Must follow the four-portal architecture
- **Use standard authentication patterns** - Must use Zoho Catalyst built-in auth with custom validation
- **Follow generic HIPAA templates** - Must implement custom PHI handling for this specific platform
- **Use external libraries** without explicit approval - Stick to Zoho native solutions
- **Work without selecting a Notion task** - Always reference specific task from database

### DO:
- **Query Notion database first** - Get current task priorities and context
- **Reference Zoho documentation** for API patterns and best practices
- **Custom implement** all business logic specific to doula and childcare services
- **Follow the four-portal architecture** exactly as specified in PLANNING.md
- **Implement custom PHI encryption** using Zoho DataStore encrypted_text fields
- **Create custom audit logging** tailored to healthcare compliance requirements
- **Build custom user role management** for Employee/Contractor/Admin/Employer roles
- **Update Notion task status** throughout development process

## üèóÔ∏è Custom Implementation Requirements

### Project-Specific Architecture (From PLANNING.md + Notion Tasks):
```
MUST FOLLOW EXACTLY:
- Four-portal system: Employee, Contractor, Admin, Employer
- Zoho Catalyst native backend with custom functions
- React 18 frontend with Catalyst Web SDK
- Zoho DataStore with custom PHI encryption
- Custom business logic for doula and childcare services
- Custom HIPAA compliance implementation
- Task-driven development using Notion MCP
```

### Notion-Driven Development Pattern:
```javascript
// CORRECT APPROACH - Notion task-driven custom implementation
// 1. Query Notion for active task
const currentTask = await getNotionTask();

// 2. Understand task context and requirements
const taskDetails = {
  title: currentTask.properties.Name.title[0].plain_text,
  description: currentTask.properties.Description.rich_text[0].plain_text,
  priority: currentTask.properties.Priority.select.name,
  assignedTo: currentTask.properties.Assigned.people[0].name,
  dueDate: currentTask.properties.Due.date.start
};

// 3. Implement custom solution based on task requirements
// Reference Zoho docs for patterns, implement custom logic
if (taskDetails.title.includes('Authentication')) {
  // Custom authentication implementation for healthcare platform
  await implementCustomHealthcareAuth(taskDetails);
} else if (taskDetails.title.includes('Service Request')) {
  // Custom service request implementation for doula/childcare
  await implementCustomServiceRequest(taskDetails);
}

// 4. Update Notion task with progress
await updateNotionTaskProgress(currentTask.id, 'Testing');
```

### Task-Specific Custom Implementation:
```javascript
// Example: Custom implementation based on Notion task
async function implementCustomServiceRequest(taskDetails) {
  // Read task-specific requirements from Notion
  const requirements = parseTaskRequirements(taskDetails.description);
  
  // Custom implementation for THIS healthcare platform only
  if (requirements.serviceType === 'doula') {
    // Custom doula service logic
    await createCustomDoulaRequestHandler(requirements);
  } else if (requirements.serviceType === 'childcare') {
    // Custom childcare service logic
    await createCustomChildcareRequestHandler(requirements);
  }
  
  // Update Notion with implementation details
  await addTaskNotes(taskDetails.id, 'Custom implementation completed');
}
```

## üè• Healthcare Platform Custom Requirements

### Notion Task Categories (Expected in Database):
```javascript
// Expected task categories in Notion database
const taskCategories = {
  'Authentication': 'Custom user auth for four portals',
  'Service Management': 'Doula and childcare service workflows',
  'PHI Handling': 'Custom HIPAA compliance implementation',
  'Portal Development': 'Employee/Contractor/Admin/Employer UIs',
  'Integration': 'Zoho One service integrations',
  'Testing': 'Healthcare-specific test scenarios',
  'Documentation': 'Platform-specific documentation updates'
};

// Task priority handling
const handleTaskByPriority = async (task) => {
  const priority = task.properties.Priority.select.name;
  
  switch (priority) {
    case 'Critical':
      // Immediate implementation for healthcare safety
      await implementImmediately(task);
      break;
    case 'High':
      // Prioritize for next development cycle
      await scheduleHighPriority(task);
      break;
    case 'Medium':
    case 'Low':
      // Add to development backlog
      await addToBacklog(task);
      break;
  }
};
```

### Custom PHI Handling (Notion Task Driven):
```javascript
// Reference Zoho DataStore documentation for encrypted_text
// Then implement CUSTOM PHI handling based on Notion task requirements

const implementPHITaskRequirements = async (notionTask) => {
  const phiRequirements = parseTaskPHIRequirements(notionTask.description);
  
  const customHealthcarePHI = {
    // Custom schema based on task specifications
    pregnancy_data: { 
      type: 'encrypted_text', 
      pii: true,
      task_ref: notionTask.id 
    },
    birth_plan: { 
      type: 'encrypted_text', 
      pii: true,
      task_ref: notionTask.id 
    },
    
    // Custom audit fields for this platform
    snug_audit_trail: { 
      type: 'encrypted_text', 
      pii: true,
      notion_task_context: notionTask.properties.Name.title[0].plain_text
    }
  };
  
  // Update Notion task with implementation details
  await updateNotionTask(notionTask.id, {
    status: 'Complete',
    implementation_notes: 'Custom PHI schema implemented with Zoho DataStore'
  });
};
```

## üß™ Custom Testing Requirements (Notion Driven)

### Healthcare-Specific Testing Based on Notion Tasks:
```javascript
// Custom test suites driven by Notion task requirements
describe('Notion Task Driven Tests', () => {
  beforeEach(async () => {
    // Get test requirements from Notion task
    const testTask = await getNotionTask({ filter: { category: 'Testing' } });
    testRequirements = parseTestRequirements(testTask.description);
  });

  test('implements custom requirements from Notion task', async () => {
    // Custom test based on specific Notion task requirements
    const result = await implementTaskRequirements(testRequirements);
    
    // Verify custom implementation meets task criteria
    expect(result).toMatchNotionTaskCriteria(testRequirements);
    
    // Update Notion task with test results
    await updateNotionTaskTestResults(testTask.id, result);
  });
});
```

## üìù Notion Integration Documentation

### Always Update After Implementation:
```javascript
// Notion task completion workflow
const completeNotionTask = async (taskId, implementationDetails) => {
  await notion.updatePage({
    page_id: taskId,
    properties: {
      "Status": {
        select: { name: "Complete" }
      },
      "Implementation Notes": {
        rich_text: [{
          text: { content: implementationDetails.summary }
        }]
      },
      "Files Modified": {
        rich_text: [{
          text: { content: implementationDetails.filesChanged.join(', ') }
        }]
      },
      "Documentation Updated": {
        rich_text: [{
          text: { content: implementationDetails.docsUpdated.join(', ') }
        }]
      },
      "Completed Date": {
        date: { start: new Date().toISOString() }
      }
    }
  });
  
  // Also update project documentation
  await updateProjectDocs(implementationDetails);
};
```

## üéØ Success Criteria (Notion Driven)

### Every Implementation Must:
1. **Start with Notion task query** - Get current priorities from database
2. **Select specific task** - Focus on one Notion task at a time
3. **Follow PLANNING.md** - Adhere to documented architecture
4. **Reference Zoho docs only** - No external code examples
5. **Implement custom solutions** - No generic healthcare templates
6. **Update Notion task status** - Keep database current throughout development
7. **Focus on task requirements** - Implement exactly what task specifies
8. **Build for four portals** - Employee, Contractor, Admin, Employer
9. **Ensure HIPAA compliance** - Custom PHI handling and audit logging
10. **Complete Notion task** - Mark as done with implementation notes

## üö® Critical Reminders

- **ALWAYS start with Notion MCP query** - Get current task priorities
- **NEVER work without active Notion task** - All development must be task-driven
- **ALWAYS update Notion task status** - Keep team informed of progress
- **NEVER implement generic code** - Everything must be custom for this healthcare platform
- **ALWAYS reference project documents** - PLANNING.md, README.md are law after Notion task
- **ONLY use Zoho documentation** for technical patterns and API references  
- **ALWAYS implement custom business logic** for doula and childcare services
- **ALWAYS follow four-portal architecture** as specified in planning
- **ALWAYS consider HIPAA implications** - Custom compliance implementation required
- **ALWAYS complete Notion task** - Mark as done with detailed completion notes

Remember: This is a custom healthcare platform for doula and childcare services managed through Notion. Every line of code must be specifically designed for Snug & Kisses requirements, driven by active Notion tasks, following the documented architecture, and implementing custom solutions that serve working families and healthcare providers.
